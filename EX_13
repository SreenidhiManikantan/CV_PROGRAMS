import cv2
import numpy as np
from google.colab.patches import cv2_imshow  # Replacement for cv2.imshow in Colab

# Load YOLO model
net = cv2.dnn.readNet("/content/yolov3.weights", "/content/yolov3.cfg")
layer_names = net.getLayerNames()

# Get output layers
output_layers_indices = net.getUnconnectedOutLayers()
if isinstance(output_layers_indices, int):
    output_layers_indices = [output_layers_indices]
output_layers = [layer_names[i - 1] for i in output_layers_indices]

# Load COCO class names
classes = []
with open("/content/coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Initialize video capture
cap = cv2.VideoCapture("/content/traffic video.mp4")

# Variables for counting
vehicle_count = 0
direction = ""

# Process each frame
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    height, width, channels = frame.shape

    # Detect objects
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416),
                                 (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)

    class_ids = []
    confidences = []
    boxes = []

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5 and classes[class_id] in ["car", "truck", "bus", "motorbike"]:
                # Object detected
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)

                # Rectangle coordinates
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)

                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    # Non-max suppression
    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    for i in range(len(boxes)):
        if i in indexes:
            x, y, w, h = boxes[i]
            label = str(classes[class_ids[i]])
            color = (0, 255, 0)
            cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
            cv2.putText(frame, label, (x, y - 10),
                        cv2.FONT_HERSHEY_PLAIN, 1, color, 2)

            # Direction detection (simple example)
            center_y = y + h // 2
            if center_y < height // 2:
                direction = "Up"
            else:
                direction = "Down"

            # Counting logic
            if direction == "Down":
                vehicle_count += 1

    # Display count and direction
    cv2.putText(frame, f'Vehicle Count: {vehicle_count}', (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, f'Direction: {direction}', (10, 60),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv2_imshow(frame)  # Use cv2_imshow instead of cv2.imshow

    # Break condition
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
